import { useState } from "react";
import { motion } from "framer-motion";

export default function Reordering() {
  function move_shift(arr, index) {
    const target = 2 * Math.trunc(index / 4) + Math.trunc(index / 2);
    const [value] = arr.splice(index, 1);
    arr.splice(target, 0, value);
    return arr;
  }

  let initialOrder = [
    { color: "#cce6ff", id: 0 },
    { color: "#99ccff", id: 1 },
    { color: "#66b2ff", id: 2 },
    { color: "#3399ff", id: 3 },
    { color: "#0077ff", id: 4 },
    { color: "#005fcc", id: 5 },
    { color: "#004799", id: 6 },
    { color: "#002f66", id: 7 },
  ];

  const [order, setOrder] = useState(initialOrder);
  const [activeIndex, setActiveIndex] = useState(null);

  const referenceOrder = initialOrder.map((item) => ({ ...item }));

  const handleClick = (index) => {
    if (activeIndex === index) {
      setOrder(initialOrder.map((item) => ({ ...item }))); // reset
      setActiveIndex(null);
    } else {
      // find the original index of the clicked box
      const origIndex = referenceOrder.findIndex(
        (item) => item.id === order[index].id
      );

      // make a fresh copy of initialOrder
      const newOrder = move_shift(
        initialOrder.map((item) => ({ ...item })),
        origIndex
      );

      setOrder(newOrder);
      setActiveIndex(2 * Math.trunc(origIndex / 4) + Math.trunc(origIndex / 2));
    }
  };

  return (
    <motion.div style={gridContainer}>
      {order.map((item, index) => (
        <motion.div
          key={item.id} // use fixed id
          layout
          transition={spring}
          style={{
            ...gridItem,
            backgroundColor: item.color,
            gridColumn: index === activeIndex ? "span 3" : "span 1",
            gridRow: index === activeIndex ? "span 3" : "span 1",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            color: "white",
            fontWeight: "bold",
            fontSize: "20px",
          }}
          onClick={() => handleClick(index)}
        >
          {item.id}
        </motion.div>
      ))}
    </motion.div>
  );
}

const spring = { type: "spring", damping: 22, stiffness: 300 };

const gridContainer = {
  display: "grid",
  gridTemplateColumns: "repeat(4, 100px)", // 4 columns to fit 8 boxes
  gridAutoRows: "100px",
  gap: "10px",
  width: "max-content",
  margin: "50px auto",
};

const gridItem = {
  borderRadius: "10px",
  cursor: "pointer",
};
